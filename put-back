#!/bin/zsh
# shellcheck shell=bash

# put-back
# v0.9.9
# macOS
#
# Put Back - part of Trash Tools
# Copyright (c) 2021 Joss Brown (pseud.)
# License: MIT / place of jurisdiction: Berlin, Germany / German laws apply
#
# keyboard shortcut: CMD-DEL
#
# move individual trashed files back to their original location

export LANG=en_US.UTF-8
export PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/local/bin:/opt/homebrew/bin:/opt/sw/bin:"$HOME"/.local/bin:"$HOME"/bin:"$HOME"/local/bin

uiprocess="Put Back"
account=$(id -u)
trashxa="local.lcars.fpsr.loc#PS"

tempdir="$HOME/.cache/Finder"
tmploc="/tmp/local.lcars.TrashTools.$account.trashes"

icloud="$HOME/Library/Mobile Documents/com~apple~CloudDocs/"

_beep () {
	osascript -e 'beep' -e 'delay 0.5' &>/dev/null
}

_notify () {
	osascript &>/dev/null << EOT
tell application "System Events"
	display notification "$2" with title "$uiprocess [" & "$account" & "]" subtitle "$1"
end tell
EOT
}

if [[ $1 == "-x" ]] ; then
	shift
else
	regular=false
	trashed=false
	for filepath in "$@"
	do
		if echo "$filepath" | grep -q -e "/\.Trash/" -e "/\.Trashes/" &>/dev/null ; then
			trashed=true
		else
			regular=true
		fi
		if $trashed && $regular ; then
			_beep &
			_notify "❌ Mixed content!" "Trashed & untrashed files"
			exit
		fi
	done
	if $regular ; then
		trashes -x "$@" &
		exit
	fi
fi

_dsstore () {
	trashedpath="$1"
	trashedname=$(basename "$trashedpath")
	parentdir=$(dirname "$trashedpath")
	dsstore="$parentdir/.DS_Store"
	if ! [[ -f "$dsstore" ]] ; then
		echo -n ""
	else
		dsraw=$(xxd -p "$dsstore" | sed 's/00//g' | tr -d '\n' | sed 's/\([0-9A-F]\{2\}\)/0x\1 /g' | xxd -r -p | strings | grep -v -e "^Bud1$" -e "ptbL$" -e "^DSDB$")
		trashedinfo=$(echo "$dsraw" | sed 's/ptbLustr-/ptbLustr\n/g' | grep -A3 "^$trashedname\ptbLustr$" | tail -n +2 | grep -v "ptbNustr$")
		if ! [[ $trashedinfo ]] ; then
			echo -n ""
		else
			if [[ $(echo "$trashedinfo" | wc -l) -eq 1 ]] ; then
				echo -n "$trashedinfo"
			else
				destparent=$(echo "$trashedinfo" | head -1)
				trashedinfo=$(echo "$trashedinfo" | grep -v "^$destparent$")
				if [[ $(echo "$trashedinfo" | wc -l) -gt 1 ]] ; then
					echo -n ""
				else
					echo -n "$destparent$trashedinfo"
				fi
			fi
		fi
	fi
}

_finder-move () {
	osasource="$1"
	osasourcename="$2"
	osadestdir="$3"
	osadestname="$4"
	if [[ -d $osasource ]] ; then
		ftype="folder"
	else
		ftype="file"
	fi
	if osascript &>/dev/null << EOM
set theSource to POSIX file "$osasource"
set theDestinationFolder to POSIX file "$osadestdir"
set theTrashName to "$osasourcename"
set theFilename to "$osadestname"
set theFiletype to "$ftype"
tell application "Finder"
	if theFiletype is equal to "file" then
		move theSource to folder theDestinationFolder without replacing
		try
			set name of file theTrashName of folder theDestinationFolder to theFilename
		end try
	else if theFiletype is equal to "folder" then
		set theRestoredFolder to (move theSource to folder theDestinationFolder without replacing)
		try
			set name of theRestoredFolder to theFilename
		end try
	end if
end tell
EOM
	; then
		echo -n "ok"
	else
		echo -n "error"
	fi
}

errors=false
rmblock=false
flaunch=false
destdirs=""
atrashes=""
for trashfile in "$@"
do
	trashname=$(basename "$trashfile")
	if [[ $trashname == ".DS_Store" ]] || [[ $trashname == "._"* ]] ; then
		continue
	fi
	if ! [[ -e $trashfile ]] && ! [[ -h "$trashfile" ]] ; then
		errors=true
		_notify "❓ Trashed file missing!" "$trashname"
		continue
	fi
	
	icloudloc=false
	[[ $trashfile == "$icloud.Trash/"* ]] && icloudloc=true
	
	testpath="$trashfile"
	addpath="/$trashname"
	nested=false
	while true
	do
		tfparent=$(dirname "$testpath")
		parentbase=$(basename "$tfparent")
		if [[ $tfparent != *"/.Trash" ]] && [[ $tfparent != *"/.Trashes/$account" ]] ; then
			if [[ $tfparent == *"/.Trash/$parentbase" ]] || [[ $tfparent == *"/.Trashes/$account/$parentbase" ]] ; then
				testpath="$tfparent"
				nested=true
				continue
			else
				addpath="/$parentbase$addpath"
				testpath="$tfparent"
				nested=true
				continue
			fi
		fi
		destsubpath=$(xattr -ps "$trashxa" "$testpath" 2>/dev/null)
		destsubpath=""
		if ! [[ $destsubpath ]] ; then
			if ! $icloudloc ; then
				destsubpath=$(_dsstore "$testpath")
			else
				destsubpath=$(xattr -pxs "com.apple.trash.put-back.path#PS" "$testpath" 2>/dev/null | xxd -r -p 2>/dev/null | xargs)
				if ! [[ $destsubpath ]] ; then
					destsubpath=$(_dsstore "$testpath")
				fi			
			fi
		fi
		break
	done
	if ! [[ $destsubpath ]] ; then
		errors=true
		_notify "⚠️ Unknown file destination" "$trashname"
		continue
	fi
	
	if $icloudloc ; then
		trashlocs="$icloud.Trash"
		fvol="$icloud"
	else
		fvol=$(df "$trashfile" | tail -n +2 | awk '{print substr($0, index($0,$9))}')
		if ! [[ $fvol ]] || [[ $fvol == "/System/Volumes/Data" ]] ; then
			fvol="/"
			trashlocs="$HOME/.Trash\n/System/Volumes/Data/.Trashes/$account"
		else
			fvol=$(echo "$fvol/" | sed 's-//$-/-')
			trashlocs="$fvol.Trashes/$account"
		fi
	fi

	destpath="$fvol$destsubpath"
	$nested && destpath="$destpath$addpath"
	destdir=$(dirname "$destpath")
	destname=$(basename "$destpath")
	
	if [[ -e "$destpath" ]] || [[ -h "$destpath" ]] ; then
		if [[ $destname == "$trashname" ]] ; then
			errors=true
			shortdestpath="${destpath/#$HOME/~}"
			_notify "⚠️ File exists at restore path" "$shortdestpath"
			continue
		else
			destpath="$destdir/$trashname"
			if [[ -e "$destpath" ]] || [[ -h "$destpath" ]] ; then
				errors=true
				shortdestpath="${destpath/#$HOME/~}"
				_notify "⚠️ File exists at restore path" "$shortdestpath"
				continue
			fi
			destname="$trashname"
		fi
	else
		if $nested ; then
			if ! [[ -d "$destdir" ]] ; then
				if ! mkdir -p "$destdir" ; then
					errors=true
					_notify "⚠️ Unable to prepare destination" "$trashname"
					continue
				fi
			fi
		fi
	fi
	
	destdirs="$destdirs\n$destdir"

	if ! pgrep -x "Finder" &>/dev/null ; then
		open -j -g -b com.apple.finder && sleep 0.5
		flaunch=true
		touch "$tempdir/manual"
		rmblock=true
	else
		if ! [[ -e "$tempdir/manual" ]] ; then
			touch "$tempdir/manual"
			rmblock=true
		fi
	fi
	osaresult=$(_finder-move "$trashfile" "$trashname" "$destdir" "$destname")
	if [[ $osaresult == "ok" ]] ; then
		xattr -ds "$trashxa" "$destpath" 2>/dev/null
		atrashes="$atrashes\n$trashlocs"
	else
		errors=true
		shortdestpath="${destpath/#$HOME/~}"
		_notify "⚠️ File restore failed" "$shortdestpath"
	fi
done

$errors && _beep &

if $flaunch ; then
	osascript -e 'tell application "Finder" to quit' 2>/dev/null
	while read destdir
	do
		rm -f "$destdir/.DS_Store" 2>/dev/null
	done < <(echo -e "$destdirs" | grep -v "^$")
fi
$rmblock && rm -f "$tempdir/manual" 2>/dev/null

while read -r trashloc
do
	if ! [[ $(find "$trashloc" -mindepth 1 -maxdepth 1 ! -name '.DS_Store' 2>/dev/null) ]] ; then
		rm -f "$trashloc/.DS_Store"
	fi
done < <(echo -e "$atrashes" | grep -v "^$" 2>/dev/null | sort | awk '!a[$0]++')

exit
